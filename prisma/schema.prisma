generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  posts          Post[]
  sessions       Session[]
  userLikes      UserLikes[]
  comment        Comment[]
  books          Book[]
  userBookLikes  UserBookLikes[]
  bookComment    BookComment[]
  Novel          Novel[]
  UserNovelLikes UserNovelLikes[]
  NovelComment   NovelComment[]
}

// Post 관련
model Post {
  id            Int         @id @default(autoincrement())
  title         String
  code          String
  language      String
  totalLikes    Int         @default(0)
  totalComments Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  isLiked       Boolean
  user          User        @relation(fields: [userId], references: [id])
  userLikes     UserLikes[]
  comments      Comment[]
}

model UserLikes {
  isLiked Boolean
  postId  Int
  userId  String
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Book 관련. 나중에 분리 예정

model Book {
  id            Int             @id @default(autoincrement())
  title         String
  body          String
  author        String?
  description   String?
  discount      String?
  image         String?
  isbn          String?
  link          String?
  pubdate       String?
  publisher     String?
  totalLikes    Int             @default(0)
  totalComments Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  isLiked       Boolean
  rating        Decimal?
  user          User            @relation(fields: [userId], references: [id])
  userBookLikes UserBookLikes[]
  bookComments  BookComment[]
  userImages    String[]
  userName      String?
}

model UserBookLikes {
  isLiked Boolean
  bookId  Int
  userId  String
  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@id([bookId, userId])
}

model BookComment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Novel {
  id             Int              @id @default(autoincrement())
  title          String
  body           String
  totalLikes     Int              @default(0)
  totalComments  Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  isLiked        Boolean
  user           User             @relation(fields: [userId], references: [id])
  UserNovelLikes UserNovelLikes[]
  NovelComment   NovelComment[]
}

model UserNovelLikes {
  isLiked Boolean
  novelId Int
  userId  String
  novel   Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@id([novelId, userId])
}

model NovelComment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  novelId   Int
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
}
